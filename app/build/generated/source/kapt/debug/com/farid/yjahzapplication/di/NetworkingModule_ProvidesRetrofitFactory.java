// Generated by Dagger (https://dagger.dev).
package com.farid.yjahzapplication.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Converter;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NetworkingModule_ProvidesRetrofitFactory implements Factory<Retrofit> {
  private final Provider<String> base_urlProvider;

  private final Provider<Converter.Factory> colverFactoryProvider;

  private final Provider<OkHttpClient> okHttpClientProvider;

  public NetworkingModule_ProvidesRetrofitFactory(Provider<String> base_urlProvider,
      Provider<Converter.Factory> colverFactoryProvider,
      Provider<OkHttpClient> okHttpClientProvider) {
    this.base_urlProvider = base_urlProvider;
    this.colverFactoryProvider = colverFactoryProvider;
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public Retrofit get() {
    return providesRetrofit(base_urlProvider.get(), colverFactoryProvider.get(), okHttpClientProvider.get());
  }

  public static NetworkingModule_ProvidesRetrofitFactory create(Provider<String> base_urlProvider,
      Provider<Converter.Factory> colverFactoryProvider,
      Provider<OkHttpClient> okHttpClientProvider) {
    return new NetworkingModule_ProvidesRetrofitFactory(base_urlProvider, colverFactoryProvider, okHttpClientProvider);
  }

  public static Retrofit providesRetrofit(String base_url, Converter.Factory colverFactory,
      OkHttpClient okHttpClient) {
    return Preconditions.checkNotNullFromProvides(NetworkingModule.INSTANCE.providesRetrofit(base_url, colverFactory, okHttpClient));
  }
}
