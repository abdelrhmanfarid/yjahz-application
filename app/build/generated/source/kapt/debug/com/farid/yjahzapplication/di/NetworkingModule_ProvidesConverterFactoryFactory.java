// Generated by Dagger (https://dagger.dev).
package com.farid.yjahzapplication.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import retrofit2.Converter;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NetworkingModule_ProvidesConverterFactoryFactory implements Factory<Converter.Factory> {
  @Override
  public Converter.Factory get() {
    return providesConverterFactory();
  }

  public static NetworkingModule_ProvidesConverterFactoryFactory create() {
    return InstanceHolder.INSTANCE;
  }

  public static Converter.Factory providesConverterFactory() {
    return Preconditions.checkNotNullFromProvides(NetworkingModule.INSTANCE.providesConverterFactory());
  }

  private static final class InstanceHolder {
    private static final NetworkingModule_ProvidesConverterFactoryFactory INSTANCE = new NetworkingModule_ProvidesConverterFactoryFactory();
  }
}
